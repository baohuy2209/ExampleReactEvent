{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\OneDrive\\\\Hi\\u0300nh a\\u0309nh\\\\Ta\\u0300i li\\xEA\\u0323u\\\\GitHub\\\\ExampleReactEvent\\\\onscroll_event\\\\src\\\\components\\\\example1.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const handleScroll = e => {\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight\n    } = e.target;\n    const position = Math.ceil(scrollTop / (scrollHeight - clientHeight) * 100);\n    setScrollPosition(position);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scrollable-element\",\n    style: {\n      height: \"300px\",\n      overflowY: \"scroll\",\n      border: \"1px solid #ccc\"\n    },\n    onScroll: handleScroll,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        position: \"fixed\",\n        color: \"red\"\n      },\n      children: [\"Scroll Position: \", scrollPosition, \"px\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Each and every modern webpage that we create today tend to have user interactions. When the user interacts with the web application events are fired. That event can be a mouse click, a keypress, or something rare like connecting the battery with a charger. From the developer side, we need to \\u2018listen\\u2019 to such events and then make our application respond accordingly. This is called event handling that provides a dynamic interface to a webpage. Like JavaScript DOM, React also provides us some built-in methods to create a listener that responds accordingly to a specific event.Now we will look at certain rules to keep in mind while creating events in React. camelCase Convention: Instead of using lowercase we use camelCase while giving names of the react events. That simply means we write \\u2018onClick\\u2019 instead of \\u2018onclick\\u2019. Pass the event as a function: In React we pass a function enclosed by curly brackets as the event listener or event handler, unlike HTML where we pass the event handler or event listener as a string. Prevent the default: Just returning false inside the JSX element does not prevent the default behavior in react. Instead, we have to call the \\u2018preventDefault\\u2019 method directly inside the event handler function. Each and every modern webpage that we create today tend to have user interactions. When the user interacts with the web application events are fired. That event can be a mouse click, a keypress, or something rare like connecting the battery with a charger. From the developer side, we need to \\u2018listen\\u2019 to such events and then make our application respond accordingly. This is called event handling that provides a dynamic interface to a webpage. Like JavaScript DOM, React also provides us some built-in methods to create a listener that responds accordingly to a specific event.Now we will look at certain rules to keep in mind while creating events in React. camelCase Convention: Instead of using lowercase we use camelCase while giving names of the react events. That simply means we write \\u2018onClick\\u2019 instead of \\u2018onclick\\u2019. Pass the event as a function: In React we pass a function enclosed by curly brackets as the event listener or event handler, unlike HTML where we pass the event handler or event listener as a string. Prevent the default: Just returning false inside the JSX element does not prevent the default behavior in react. Instead, we have to call the \\u2018preventDefault\\u2019 method directly inside the event handler function.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ME8GlA9nIhSNuNnV6nQBnjdKDRA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","scrollPosition","setScrollPosition","handleScroll","e","scrollTop","scrollHeight","clientHeight","target","position","Math","ceil","className","style","height","overflowY","border","onScroll","children","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/OneDrive/Hình ảnh/Tài liệu/GitHub/ExampleReactEvent/onscroll_event/src/components/example1.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [scrollPosition, setScrollPosition] = useState(0);\r\n\r\n  const handleScroll = (e) => {\r\n    const { scrollTop, scrollHeight, clientHeight } = e.target;\r\n    const position = Math.ceil(\r\n      (scrollTop / (scrollHeight - clientHeight)) * 100\r\n    );\r\n    setScrollPosition(position);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"scrollable-element\"\r\n      style={{\r\n        height: \"300px\",\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid #ccc\",\r\n      }}\r\n      onScroll={handleScroll}\r\n    >\r\n      <h1 style={{ position: \"fixed\", color: \"red\" }}>\r\n        Scroll Position: {scrollPosition}px\r\n      </h1>\r\n      <p>\r\n        Each and every modern webpage that we create today tend to have user\r\n        interactions. When the user interacts with the web application events\r\n        are fired. That event can be a mouse click, a keypress, or something\r\n        rare like connecting the battery with a charger. From the developer\r\n        side, we need to ‘listen’ to such events and then make our application\r\n        respond accordingly. This is called event handling that provides a\r\n        dynamic interface to a webpage. Like JavaScript DOM, React also provides\r\n        us some built-in methods to create a listener that responds accordingly\r\n        to a specific event.Now we will look at certain rules to keep in mind\r\n        while creating events in React. camelCase Convention: Instead of using\r\n        lowercase we use camelCase while giving names of the react events. That\r\n        simply means we write ‘onClick’ instead of ‘onclick’. Pass the event as\r\n        a function: In React we pass a function enclosed by curly brackets as\r\n        the event listener or event handler, unlike HTML where we pass the event\r\n        handler or event listener as a string. Prevent the default: Just\r\n        returning false inside the JSX element does not prevent the default\r\n        behavior in react. Instead, we have to call the ‘preventDefault’ method\r\n        directly inside the event handler function. Each and every modern\r\n        webpage that we create today tend to have user interactions. When the\r\n        user interacts with the web application events are fired. That event can\r\n        be a mouse click, a keypress, or something rare like connecting the\r\n        battery with a charger. From the developer side, we need to ‘listen’ to\r\n        such events and then make our application respond accordingly. This is\r\n        called event handling that provides a dynamic interface to a webpage.\r\n        Like JavaScript DOM, React also provides us some built-in methods to\r\n        create a listener that responds accordingly to a specific event.Now we\r\n        will look at certain rules to keep in mind while creating events in\r\n        React. camelCase Convention: Instead of using lowercase we use camelCase\r\n        while giving names of the react events. That simply means we write\r\n        ‘onClick’ instead of ‘onclick’. Pass the event as a function: In React\r\n        we pass a function enclosed by curly brackets as the event listener or\r\n        event handler, unlike HTML where we pass the event handler or event\r\n        listener as a string. Prevent the default: Just returning false inside\r\n        the JSX element does not prevent the default behavior in react. Instead,\r\n        we have to call the ‘preventDefault’ method directly inside the event\r\n        handler function.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAEvD,MAAMO,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,SAAS;MAAEC,YAAY;MAAEC;IAAa,CAAC,GAAGH,CAAC,CAACI,MAAM;IAC1D,MAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAI,CACvBN,SAAS,IAAIC,YAAY,GAAGC,YAAY,CAAC,GAAI,GAChD,CAAC;IACDL,iBAAiB,CAACO,QAAQ,CAAC;EAC7B,CAAC;EAED,oBACEX,OAAA;IACEc,SAAS,EAAC,oBAAoB;IAC9BC,KAAK,EAAE;MACLC,MAAM,EAAE,OAAO;MACfC,SAAS,EAAE,QAAQ;MACnBC,MAAM,EAAE;IACV,CAAE;IACFC,QAAQ,EAAEd,YAAa;IAAAe,QAAA,gBAEvBpB,OAAA;MAAIe,KAAK,EAAE;QAAEJ,QAAQ,EAAE,OAAO;QAAEU,KAAK,EAAE;MAAM,CAAE;MAAAD,QAAA,GAAC,mBAC7B,EAACjB,cAAc,EAAC,IACnC;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLzB,OAAA;MAAAoB,QAAA,EAAG;IAqCH;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAACvB,EAAA,CAhEQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAkEZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}